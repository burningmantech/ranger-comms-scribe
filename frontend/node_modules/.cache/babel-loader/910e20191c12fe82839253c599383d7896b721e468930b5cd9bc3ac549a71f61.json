{"ast":null,"code":"import{API_URL}from'../config';export const fetchBlogContent=setBlogContent=>{const sessionId=localStorage.getItem('sessionId');if(sessionId){fetch(`${API_URL}/blog`,{method:'GET',headers:{Authorization:`Bearer ${sessionId}`// Pass the session ID in the Authorization header\n}}).then(res=>{if(!res.ok){throw new Error('Failed to fetch blog content');}return res.text();// Assuming the blog content is plain text or HTML\n}).then(content=>{setBlogContent(content);// Store the blog content in state\n}).catch(error=>{console.error('Error fetching blog content:',error);});}};export const logoutUser=(setUser,setBlogContent)=>{const sessionId=localStorage.getItem('sessionId');// Retrieve the session ID from localStorage\nif(sessionId){// Call the backend's logout endpoint\nfetch(`${API_URL}/auth/logout`,{method:'POST',headers:{'Content-Type':'application/json',Authorization:`Bearer ${sessionId}`// Pass the session ID in the Authorization header\n}}).then(res=>{if(!res.ok){throw new Error('Failed to log out');}console.log('Logout successful');}).catch(error=>{console.error('Error during logout:',error);});}// Clear user and session data from localStorage\nlocalStorage.removeItem('user');localStorage.removeItem('sessionId');// Clear user state\nsetUser(null);setBlogContent(null);// Clear blog content\nconsole.log('User logged out');};","map":{"version":3,"names":["API_URL","fetchBlogContent","setBlogContent","sessionId","localStorage","getItem","fetch","method","headers","Authorization","then","res","ok","Error","text","content","catch","error","console","logoutUser","setUser","log","removeItem"],"sources":["/Users/ayoung/work/src/github.com/dcwb/frontend/src/utils/userActions.ts"],"sourcesContent":["import { API_URL } from '../config';\n\nexport const fetchBlogContent = (\n    setBlogContent: React.Dispatch<React.SetStateAction<string | null>>\n) => {\n    const sessionId = localStorage.getItem('sessionId');\n    if (sessionId) {\n        fetch(`${API_URL}/blog`, {\n            method: 'GET',\n            headers: {\n                Authorization: `Bearer ${sessionId}`, // Pass the session ID in the Authorization header\n            },\n        })\n            .then((res) => {\n                if (!res.ok) {\n                    throw new Error('Failed to fetch blog content');\n                }\n                return res.text(); // Assuming the blog content is plain text or HTML\n            })\n            .then((content) => {\n                setBlogContent(content); // Store the blog content in state\n            })\n            .catch((error) => {\n                console.error('Error fetching blog content:', error);\n            });\n    }\n};\n\nexport const logoutUser = (\n    setUser: React.Dispatch<React.SetStateAction<{ email: string; name: string } | null>>,\n    setBlogContent: React.Dispatch<React.SetStateAction<string | null>>\n) => {\n    const sessionId = localStorage.getItem('sessionId'); // Retrieve the session ID from localStorage\n\n    if (sessionId) {\n        // Call the backend's logout endpoint\n        fetch(`${API_URL}/auth/logout`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${sessionId}`, // Pass the session ID in the Authorization header\n            },\n        })\n            .then((res) => {\n                if (!res.ok) {\n                    throw new Error('Failed to log out');\n                }\n                console.log('Logout successful');\n            })\n            .catch((error) => {\n                console.error('Error during logout:', error);\n            });\n    }\n\n    // Clear user and session data from localStorage\n    localStorage.removeItem('user');\n    localStorage.removeItem('sessionId');\n\n    // Clear user state\n    setUser(null);\n    setBlogContent(null); // Clear blog content\n\n    console.log('User logged out');\n};"],"mappings":"AAAA,OAASA,OAAO,KAAQ,WAAW,CAEnC,MAAO,MAAM,CAAAC,gBAAgB,CACzBC,cAAmE,EAClE,CACD,KAAM,CAAAC,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CACnD,GAAIF,SAAS,CAAE,CACXG,KAAK,CAAC,GAAGN,OAAO,OAAO,CAAE,CACrBO,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACLC,aAAa,CAAE,UAAUN,SAAS,EAAI;AAC1C,CACJ,CAAC,CAAC,CACGO,IAAI,CAAEC,GAAG,EAAK,CACX,GAAI,CAACA,GAAG,CAACC,EAAE,CAAE,CACT,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAC,CACnD,CACA,MAAO,CAAAF,GAAG,CAACG,IAAI,CAAC,CAAC,CAAE;AACvB,CAAC,CAAC,CACDJ,IAAI,CAAEK,OAAO,EAAK,CACfb,cAAc,CAACa,OAAO,CAAC,CAAE;AAC7B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,EAAK,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACxD,CAAC,CAAC,CACV,CACJ,CAAC,CAED,MAAO,MAAM,CAAAE,UAAU,CAAGA,CACtBC,OAAqF,CACrFlB,cAAmE,GAClE,CACD,KAAM,CAAAC,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAE;AAErD,GAAIF,SAAS,CAAE,CACX;AACAG,KAAK,CAAC,GAAGN,OAAO,cAAc,CAAE,CAC5BO,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClCC,aAAa,CAAE,UAAUN,SAAS,EAAI;AAC1C,CACJ,CAAC,CAAC,CACGO,IAAI,CAAEC,GAAG,EAAK,CACX,GAAI,CAACA,GAAG,CAACC,EAAE,CAAE,CACT,KAAM,IAAI,CAAAC,KAAK,CAAC,mBAAmB,CAAC,CACxC,CACAK,OAAO,CAACG,GAAG,CAAC,mBAAmB,CAAC,CACpC,CAAC,CAAC,CACDL,KAAK,CAAEC,KAAK,EAAK,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAChD,CAAC,CAAC,CACV,CAEA;AACAb,YAAY,CAACkB,UAAU,CAAC,MAAM,CAAC,CAC/BlB,YAAY,CAACkB,UAAU,CAAC,WAAW,CAAC,CAEpC;AACAF,OAAO,CAAC,IAAI,CAAC,CACblB,cAAc,CAAC,IAAI,CAAC,CAAE;AAEtBgB,OAAO,CAACG,GAAG,CAAC,iBAAiB,CAAC,CAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}