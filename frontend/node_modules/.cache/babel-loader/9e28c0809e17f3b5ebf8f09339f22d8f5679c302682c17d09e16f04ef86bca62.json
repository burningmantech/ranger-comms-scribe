{"ast":null,"code":"var _jsxFileName = \"/Users/ayoung/work/src/github.com/dcwb/frontend/src/components/Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  useEffect(() => {\n    let googlePromptCalled = false; // Track if prompt() has already been called\n\n    const initGoogleOneTap = () => {\n      if (window.google && window.google.accounts && window.google.accounts.id) {\n        console.log('Google One Tap initialized');\n        window.google.accounts.id.initialize({\n          client_id: '506064022717-4f6o2i9v8560g5g3ns45h1al3sr2p8j0.apps.googleusercontent.com',\n          callback: handleCredentialResponse\n        });\n\n        // Ensure prompt() is only called once\n        if (!googlePromptCalled) {\n          window.google.accounts.id.prompt();\n          googlePromptCalled = true;\n        }\n      } else {\n        console.error('Google One Tap initialization failed');\n      }\n    };\n    const handleCredentialResponse = response => {\n      console.log('Encoded JWT ID token: ' + response.credential);\n      // Send the token to your backend for verification\n    };\n    const loadGoogleScript = () => {\n      const script = document.createElement('script');\n      script.id = 'google-one-tap-script';\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        console.log('Google One Tap script loaded');\n        initGoogleOneTap();\n      };\n      script.onerror = () => {\n        console.error('Failed to load Google One Tap script');\n      };\n      document.body.appendChild(script);\n    };\n    if (!document.getElementById('google-one-tap-script')) {\n      // Load the script if it's not already in the DOM\n      loadGoogleScript();\n    } else {\n      // Wait for the script to fully load before initializing\n      const existingScript = document.getElementById('google-one-tap-script');\n      existingScript === null || existingScript === void 0 ? void 0 : existingScript.addEventListener('load', () => {\n        console.log('Google One Tap script already loaded');\n        initGoogleOneTap();\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please log in using Google One Tap.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Login","_s","googlePromptCalled","initGoogleOneTap","window","google","accounts","id","console","log","initialize","client_id","callback","handleCredentialResponse","prompt","error","response","credential","loadGoogleScript","script","document","createElement","src","async","defer","onload","onerror","body","appendChild","getElementById","existingScript","addEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ayoung/work/src/github.com/dcwb/frontend/src/components/Login.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\ndeclare global {\n    interface Window {\n        google: any;\n    }\n}\n\nconst Login: React.FC = () => {\n    useEffect(() => {\n        let googlePromptCalled = false; // Track if prompt() has already been called\n\n        const initGoogleOneTap = () => {\n            if (window.google && window.google.accounts && window.google.accounts.id) {\n                console.log('Google One Tap initialized');\n                window.google.accounts.id.initialize({\n                    client_id: '506064022717-4f6o2i9v8560g5g3ns45h1al3sr2p8j0.apps.googleusercontent.com',\n                    callback: handleCredentialResponse,\n                });\n\n                // Ensure prompt() is only called once\n                if (!googlePromptCalled) {\n                    window.google.accounts.id.prompt();\n                    googlePromptCalled = true;\n                }\n            } else {\n                console.error('Google One Tap initialization failed');\n            }\n        };\n\n        const handleCredentialResponse = (response: any) => {\n            console.log('Encoded JWT ID token: ' + response.credential);\n            // Send the token to your backend for verification\n        };\n\n        const loadGoogleScript = () => {\n            const script = document.createElement('script');\n            script.id = 'google-one-tap-script';\n            script.src = 'https://accounts.google.com/gsi/client';\n            script.async = true;\n            script.defer = true;\n            script.onload = () => {\n                console.log('Google One Tap script loaded');\n                initGoogleOneTap();\n            };\n            script.onerror = () => {\n                console.error('Failed to load Google One Tap script');\n            };\n            document.body.appendChild(script);\n        };\n\n        if (!document.getElementById('google-one-tap-script')) {\n            // Load the script if it's not already in the DOM\n            loadGoogleScript();\n        } else {\n            // Wait for the script to fully load before initializing\n            const existingScript = document.getElementById('google-one-tap-script');\n            existingScript?.addEventListener('load', () => {\n                console.log('Google One Tap script already loaded');\n                initGoogleOneTap();\n            });\n        }\n    }, []);\n\n    return (\n        <div>\n            <h2>Login</h2>\n            <p>Please log in using Google One Tap.</p>\n        </div>\n    );\n};\n\nexport default Login;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQzC,MAAMC,KAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1BJ,SAAS,CAAC,MAAM;IACZ,IAAIK,kBAAkB,GAAG,KAAK,CAAC,CAAC;;IAEhC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,IAAIC,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACC,QAAQ,IAAIF,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,EAAE;QACtEC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzCL,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACG,UAAU,CAAC;UACjCC,SAAS,EAAE,0EAA0E;UACrFC,QAAQ,EAAEC;QACd,CAAC,CAAC;;QAEF;QACA,IAAI,CAACX,kBAAkB,EAAE;UACrBE,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACO,MAAM,CAAC,CAAC;UAClCZ,kBAAkB,GAAG,IAAI;QAC7B;MACJ,CAAC,MAAM;QACHM,OAAO,CAACO,KAAK,CAAC,sCAAsC,CAAC;MACzD;IACJ,CAAC;IAED,MAAMF,wBAAwB,GAAIG,QAAa,IAAK;MAChDR,OAAO,CAACC,GAAG,CAAC,wBAAwB,GAAGO,QAAQ,CAACC,UAAU,CAAC;MAC3D;IACJ,CAAC;IAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACZ,EAAE,GAAG,uBAAuB;MACnCY,MAAM,CAACG,GAAG,GAAG,wCAAwC;MACrDH,MAAM,CAACI,KAAK,GAAG,IAAI;MACnBJ,MAAM,CAACK,KAAK,GAAG,IAAI;MACnBL,MAAM,CAACM,MAAM,GAAG,MAAM;QAClBjB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3CN,gBAAgB,CAAC,CAAC;MACtB,CAAC;MACDgB,MAAM,CAACO,OAAO,GAAG,MAAM;QACnBlB,OAAO,CAACO,KAAK,CAAC,sCAAsC,CAAC;MACzD,CAAC;MACDK,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,MAAM,CAAC;IACrC,CAAC;IAED,IAAI,CAACC,QAAQ,CAACS,cAAc,CAAC,uBAAuB,CAAC,EAAE;MACnD;MACAX,gBAAgB,CAAC,CAAC;IACtB,CAAC,MAAM;MACH;MACA,MAAMY,cAAc,GAAGV,QAAQ,CAACS,cAAc,CAAC,uBAAuB,CAAC;MACvEC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,gBAAgB,CAAC,MAAM,EAAE,MAAM;QAC3CvB,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QACnDN,gBAAgB,CAAC,CAAC;MACtB,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIJ,OAAA;IAAAiC,QAAA,gBACIjC,OAAA;MAAAiC,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdrC,OAAA;MAAAiC,QAAA,EAAG;IAAmC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEd,CAAC;AAACnC,EAAA,CA9DID,KAAe;AAAAqC,EAAA,GAAfrC,KAAe;AAgErB,eAAeA,KAAK;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}