{"ast":null,"code":"var _jsxFileName = \"/Users/ayoung/work/src/github.com/dcwb/frontend/src/components/Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  useEffect(() => {\n    const handleCredentialResponse = response => {\n      console.log('Encoded JWT ID token: ' + response.credential);\n      // Send the token to your backend for verification\n    };\n    const loadGoogleScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        console.log('Google Sign-In script loaded');\n        window.google.accounts.id.initialize({\n          client_id: '506064022717-4f6o2i9v8560g5g3ns45h1al3sr2p8j0.apps.googleusercontent.com',\n          callback: handleCredentialResponse\n        });\n        window.google.accounts.id.renderButton(document.getElementById('google-signin-button'), {\n          theme: 'outline',\n          size: 'large'\n        });\n      };\n      script.onerror = () => {\n        console.error('Failed to load Google Sign-In script');\n      };\n      document.body.appendChild(script);\n    };\n    if (!document.getElementById('google-signin-script')) {\n      loadGoogleScript();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sign in using your Google account:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"google-signin-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Login","_s","handleCredentialResponse","response","console","log","credential","loadGoogleScript","script","document","createElement","src","async","defer","onload","window","google","accounts","id","initialize","client_id","callback","renderButton","getElementById","theme","size","onerror","error","body","appendChild","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ayoung/work/src/github.com/dcwb/frontend/src/components/Login.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\ndeclare global {\n    interface Window {\n        google: any;\n    }\n}\n\nconst Login: React.FC = () => {\n    useEffect(() => {\n        const handleCredentialResponse = (response: any) => {\n            console.log('Encoded JWT ID token: ' + response.credential);\n            // Send the token to your backend for verification\n        };\n\n        const loadGoogleScript = () => {\n            const script = document.createElement('script');\n            script.src = 'https://accounts.google.com/gsi/client';\n            script.async = true;\n            script.defer = true;\n            script.onload = () => {\n                console.log('Google Sign-In script loaded');\n                window.google.accounts.id.initialize({\n                    client_id: '506064022717-4f6o2i9v8560g5g3ns45h1al3sr2p8j0.apps.googleusercontent.com',\n                    callback: handleCredentialResponse,\n                });\n                window.google.accounts.id.renderButton(\n                    document.getElementById('google-signin-button'),\n                    {\n                        theme: 'outline',\n                        size: 'large',\n                    }\n                );\n            };\n            script.onerror = () => {\n                console.error('Failed to load Google Sign-In script');\n            };\n            document.body.appendChild(script);\n        };\n\n        if (!document.getElementById('google-signin-script')) {\n            loadGoogleScript();\n        }\n    }, []);\n\n    return (\n        <div>\n            <h2>Login</h2>\n            <p>Sign in using your Google account:</p>\n            <div id=\"google-signin-button\"></div>\n        </div>\n    );\n};\n\nexport default Login;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQzC,MAAMC,KAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1BJ,SAAS,CAAC,MAAM;IACZ,MAAMK,wBAAwB,GAAIC,QAAa,IAAK;MAChDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,GAAGF,QAAQ,CAACG,UAAU,CAAC;MAC3D;IACJ,CAAC;IAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,GAAG,GAAG,wCAAwC;MACrDH,MAAM,CAACI,KAAK,GAAG,IAAI;MACnBJ,MAAM,CAACK,KAAK,GAAG,IAAI;MACnBL,MAAM,CAACM,MAAM,GAAG,MAAM;QAClBV,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3CU,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;UACjCC,SAAS,EAAE,0EAA0E;UACrFC,QAAQ,EAAEnB;QACd,CAAC,CAAC;QACFa,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACI,YAAY,CAClCb,QAAQ,CAACc,cAAc,CAAC,sBAAsB,CAAC,EAC/C;UACIC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE;QACV,CACJ,CAAC;MACL,CAAC;MACDjB,MAAM,CAACkB,OAAO,GAAG,MAAM;QACnBtB,OAAO,CAACuB,KAAK,CAAC,sCAAsC,CAAC;MACzD,CAAC;MACDlB,QAAQ,CAACmB,IAAI,CAACC,WAAW,CAACrB,MAAM,CAAC;IACrC,CAAC;IAED,IAAI,CAACC,QAAQ,CAACc,cAAc,CAAC,sBAAsB,CAAC,EAAE;MAClDhB,gBAAgB,CAAC,CAAC;IACtB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIR,OAAA;IAAA+B,QAAA,gBACI/B,OAAA;MAAA+B,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdnC,OAAA;MAAA+B,QAAA,EAAG;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACzCnC,OAAA;MAAKmB,EAAE,EAAC;IAAsB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEd,CAAC;AAACjC,EAAA,CA5CID,KAAe;AAAAmC,EAAA,GAAfnC,KAAe;AA8CrB,eAAeA,KAAK;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}